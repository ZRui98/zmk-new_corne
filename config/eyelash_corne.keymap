#define ZMK_POINTING_DEFAULT_MOVE_VAL 1200  // 600
#define ZMK_POINTING_DEFAULT_SCRL_VAL 25   // 10

#include <input/processors.dtsi>
#include <zephyr/dt-bindings/input/input-event-codes.h>
#include <behaviors.dtsi>
#include <dt-bindings/zmk/backlight.h>
#include <dt-bindings/zmk/bt.h>
#include <dt-bindings/zmk/keys.h>
#include <dt-bindings/zmk/outputs.h>
#include <dt-bindings/zmk/pointing.h>
#include <dt-bindings/zmk/rgb.h>

&mmv_input_listener { input-processors = <&zip_xy_scaler 2 1>; };

&msc_input_listener { input-processors = <&zip_scroll_scaler 2 1>; };

&msc {
    acceleration-exponent = <1>;      // 0
    time-to-max-speed-ms = <100>;       // 300
    delay-ms = <0>;                   // 0
};

&mmv {
    time-to-max-speed-ms = <500>;
    acceleration-exponent = <1>;
    trigger-period-ms = <16>;
};

&mt {
    tapping-term-ms = <280>;
    require-prior-idle-ms = <150>;
    quick-tap-ms = <175>;
    flavor = "balanced";
    hold-trigger-key-positions = <14 15 16 17 26 25 24 23>;
    hold-trigger-on-release;
};

/ {
    behaviors {
        td0: td0 {
            compatible = "zmk,behavior-tap-dance";
            display-name = "Shift/Caps Lock Tap Dance";
            #binding-cells = <0>;
            bindings = <&kp LEFT_SHIFT>, <&kp CAPS>;
        };
    };

    rgb_encoder: rgb_encoder {
        compatible = "zmk,behavior-sensor-rotate";
        #sensor-binding-cells = <0>;
        bindings = <&rgb_ug RGB_BRI>, <&rgb_ug RGB_BRD>;
    };

    scroll_encoder: scroll_encoder {
        compatible = "zmk,behavior-sensor-rotate";
        #sensor-binding-cells = <0>;
        bindings = <&msc SCRL_DOWN>, <&msc SCRL_UP>;

        tap-ms = <100>;
    };

    keymap {
        compatible = "zmk,keymap";

        base {
            display-name = "base";
            bindings = <
&kp TAB         &kp Q           &kp W           &kp E               &kp R             &kp T                                      &mmv MOVE_UP                     &kp Y        &kp U              &kp I                &kp O            &kp P               &kp EQUAL
&kp LEFT_SHIFT  &mt LEFT_GUI A  &mt LEFT_ALT S  &mt LEFT_CONTROL D  &mt LEFT_SHIFT F  &kp G                      &mmv MOVE_LEFT  &kp ENTER       &mmv MOVE_RIGHT  &kp H        &mt RIGHT_SHIFT J  &mt RIGHT_CONTROL K  &mt RIGHT_ALT L  &mt RIGHT_GUI SEMI  &kp SQT
&kp LCTRL       &kp Z           &kp X           &kp C               &kp V             &kp B        &kp K_MUTE                    &mmv MOVE_DOWN                   &kp N        &kp M              &kp COMMA            &kp DOT          &kp FSLH            &kp MINUS
                                                &kp LGUI            &mo 1             &lt 1 SPACE                                                                 &lt 2 ENTER  &kp BACKSPACE      &kp RALT
            >;

            sensor-bindings = <&inc_dec_kp C_VOLUME_UP C_VOLUME_DOWN>;
        };

        number {
            display-name = "number";
            bindings = <
&trans        &trans                 &trans                 &trans                     &trans                   &trans                                      &mmv MOVE_UP                     &trans           &trans           &trans            &trans             &kp HOME  &kp PRINTSCREEN
&kp NUMBER_1  &mt LEFT_GUI NUMBER_2  &mt LEFT_ALT NUMBER_3  &mt LEFT_CONTROL NUMBER_4  &mt LEFT_SHIFT NUMBER_5  &kp NUMBER_6                &mmv MOVE_LEFT  &mkp LCLK       &mmv MOVE_RIGHT  &trans           &trans           &trans            &trans             &trans    &trans
&kp NUMBER_7  &kp NUMBER_8           &kp NUMBER_9           &kp NUMBER_0               &trans                   &trans        &kp C_MUTE                    &mmv MOVE_DOWN                   &rgb_ug RGB_EFR  &rgb_ug RGB_SPI  &kp LEFT_BRACKET  &kp RIGHT_BRACKET  &trans    &trans
                                                            &trans                     &trans                   &trans                                                                       &kp INS          &kp DEL          &trans
            >;

            sensor-bindings = <&scroll_encoder>;
        };

        mouse {
            display-name = "mouse";
            bindings = <
&bt BT_NXT    &trans        &trans      &trans  &trans  &trans                               &mmv MOVE_UP                     &mkp LCLK  &mkp RCLK  &trans    &trans     &trans  &trans
&bt BT_SEL 0  &trans        &trans      &trans  &trans  &trans               &mmv MOVE_LEFT  &mkp MCLK       &mmv MOVE_RIGHT  &kp LEFT   &kp UP     &kp DOWN  &kp RIGHT  &trans  &trans
&bt BT_SEL 1  &out OUT_TOG  &bl BL_TOG  &none   &none   &trans     &trans                    &mmv MOVE_DOWN                   &kp HOME   &trans     &trans    &trans     &trans  &trans
                                        &trans  &trans  &kp SPACE                                                             &kp RET    &trans     &trans
            >;

            sensor-bindings = <&scroll_encoder>;
        };

        fn {
            display-name = "fn";
            bindings = <
&trans  &trans  &trans  &trans   &trans   &trans                                 &mmv MOVE_UP                     &trans  &trans  &trans  &trans  &bootloader  &to 4
&kp F1  &kp F2  &kp F3  &kp F4   &kp F5   &kp F6                 &mmv MOVE_LEFT  &mkp LCLK       &mmv MOVE_RIGHT  &trans  &trans  &trans  &trans  &trans       &trans
&kp F7  &kp F8  &kp F9  &kp F10  &kp F11  &kp F12  &kp C_MUTE                    &mmv MOVE_DOWN                   &trans  &trans  &trans  &trans  &trans       &trans
                        &trans   &trans   &trans                                                                  &trans  &trans  &trans
            >;

            sensor-bindings = <&scroll_encoder>;
        };

        game {
            bindings = <
&trans          &kp F1  &kp F2  &kp F3            &kp F4  &kp F5                            &mmv MOVE_UP                     &kp F6        &kp F7        &kp F8        &kp F9        &kp F10  &trans
&trans          &kp Q   &kp W   &kp E             &trans  &trans            &mmv MOVE_LEFT  &trans          &mmv MOVE_RIGHT  &kp NUMBER_1  &kp NUMBER_2  &kp NUMBER_3  &kp NUMBER_4  &kp N5   &trans
&kp LEFT_SHIFT  &kp A   &kp S   &kp D             &trans  &trans  &trans                    &mmv MOVE_DOWN                   &kp NUMBER_6  &kp N7        &kp N8        &kp N9        &kp N0   &to 0
                                &kp LEFT_CONTROL  &trans  &trans                                                             &trans        &trans        &trans
            >;
        };
    };

    conditional_layers {
        compatible = "zmk,conditional-layers";

        Double {
            if-layers = <1 2>;
            then-layer = <3>;
        };
    };
};
